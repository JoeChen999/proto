// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgPveInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMsgPveInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBMsgPveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgPveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgPveInfo_PBMsgPveLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgPveInfo_PBMsgPveLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMsgPveInfo_PBMsgPveHidenBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgPveInfo_PBMsgPveHidenBossInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMsgPveInfo_2eproto() {
  protobuf_AddDesc_PBMsgPveInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMsgPveInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PBMsgPveInfo_descriptor_ = file->message_type(0);
  static const int PBMsgPveInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo, totalstars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo, levelinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo, staminainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo, resultinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo, marchinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo, hidenbossinfo_),
  };
  PBMsgPveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMsgPveInfo_descriptor_,
      PBMsgPveInfo::default_instance_,
      PBMsgPveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMsgPveInfo));
  PBMsgPveInfo_PBMsgPveLevelInfo_descriptor_ = PBMsgPveInfo_descriptor_->nested_type(0);
  static const int PBMsgPveInfo_PBMsgPveLevelInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, highestscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, higheststar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, highestspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, highestvitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, highesttactics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, lastscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, laststar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, lastspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, lastvitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, lasttactics_),
  };
  PBMsgPveInfo_PBMsgPveLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMsgPveInfo_PBMsgPveLevelInfo_descriptor_,
      PBMsgPveInfo_PBMsgPveLevelInfo::default_instance_,
      PBMsgPveInfo_PBMsgPveLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMsgPveInfo_PBMsgPveLevelInfo));
  PBMsgPveInfo_PBMsgPveHidenBossInfo_descriptor_ = PBMsgPveInfo_descriptor_->nested_type(1);
  static const int PBMsgPveInfo_PBMsgPveHidenBossInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveHidenBossInfo, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveHidenBossInfo, activetime_),
  };
  PBMsgPveInfo_PBMsgPveHidenBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMsgPveInfo_PBMsgPveHidenBossInfo_descriptor_,
      PBMsgPveInfo_PBMsgPveHidenBossInfo::default_instance_,
      PBMsgPveInfo_PBMsgPveHidenBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveHidenBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveInfo_PBMsgPveHidenBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMsgPveInfo_PBMsgPveHidenBossInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMsgPveInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMsgPveInfo_descriptor_, &PBMsgPveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMsgPveInfo_PBMsgPveLevelInfo_descriptor_, &PBMsgPveInfo_PBMsgPveLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMsgPveInfo_PBMsgPveHidenBossInfo_descriptor_, &PBMsgPveInfo_PBMsgPveHidenBossInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMsgPveInfo_2eproto() {
  delete PBMsgPveInfo::default_instance_;
  delete PBMsgPveInfo_reflection_;
  delete PBMsgPveInfo_PBMsgPveLevelInfo::default_instance_;
  delete PBMsgPveInfo_PBMsgPveLevelInfo_reflection_;
  delete PBMsgPveInfo_PBMsgPveHidenBossInfo::default_instance_;
  delete PBMsgPveInfo_PBMsgPveHidenBossInfo_reflection_;
}

void protobuf_AddDesc_PBMsgPveInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022PBMsgPveInfo.proto\"\234\004\n\014PBMsgPveInfo\022\022\n"
    "\ntotalScore\030\001 \001(\005\022\022\n\ntotalStars\030\002 \001(\005\0222\n"
    "\tlevelInfo\030\003 \003(\0132\037.PBMsgPveInfo.PBMsgPve"
    "LevelInfo\022\023\n\013staminaInfo\030\004 \001(\014\022\022\n\nresult"
    "Info\030\005 \001(\014\022\021\n\tmarchInfo\030\006 \001(\014\022:\n\rhidenBo"
    "ssInfo\030\007 \003(\0132#.PBMsgPveInfo.PBMsgPveHide"
    "nBossInfo\032\371\001\n\021PBMsgPveLevelInfo\022\017\n\007level"
    "ID\030\001 \002(\005\022\024\n\014highestScore\030\002 \001(\005\022\023\n\013highes"
    "tStar\030\003 \001(\005\022\024\n\014highestSpeed\030\004 \001(\005\022\027\n\017hig"
    "hestVitality\030\005 \001(\005\022\026\n\016highestTactics\030\006 \001"
    "(\005\022\021\n\tlastScore\030\007 \001(\005\022\020\n\010lastStar\030\010 \001(\005\022"
    "\021\n\tlastSpeed\030\t \001(\005\022\024\n\014lastVitality\030\n \001(\005"
    "\022\023\n\013lastTactics\030\013 \001(\005\032<\n\025PBMsgPveHidenBo"
    "ssInfo\022\017\n\007levelID\030\001 \002(\005\022\022\n\nactiveTime\030\002 "
    "\001(\003", 563);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMsgPveInfo.proto", &protobuf_RegisterTypes);
  PBMsgPveInfo::default_instance_ = new PBMsgPveInfo();
  PBMsgPveInfo_PBMsgPveLevelInfo::default_instance_ = new PBMsgPveInfo_PBMsgPveLevelInfo();
  PBMsgPveInfo_PBMsgPveHidenBossInfo::default_instance_ = new PBMsgPveInfo_PBMsgPveHidenBossInfo();
  PBMsgPveInfo::default_instance_->InitAsDefaultInstance();
  PBMsgPveInfo_PBMsgPveLevelInfo::default_instance_->InitAsDefaultInstance();
  PBMsgPveInfo_PBMsgPveHidenBossInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMsgPveInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMsgPveInfo_2eproto {
  StaticDescriptorInitializer_PBMsgPveInfo_2eproto() {
    protobuf_AddDesc_PBMsgPveInfo_2eproto();
  }
} static_descriptor_initializer_PBMsgPveInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBMsgPveInfo_PBMsgPveLevelInfo::kLevelIDFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kHighestScoreFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kHighestStarFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kHighestSpeedFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kHighestVitalityFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kHighestTacticsFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kLastScoreFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kLastStarFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kLastSpeedFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kLastVitalityFieldNumber;
const int PBMsgPveInfo_PBMsgPveLevelInfo::kLastTacticsFieldNumber;
#endif  // !_MSC_VER

PBMsgPveInfo_PBMsgPveLevelInfo::PBMsgPveInfo_PBMsgPveLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMsgPveInfo_PBMsgPveLevelInfo::InitAsDefaultInstance() {
}

PBMsgPveInfo_PBMsgPveLevelInfo::PBMsgPveInfo_PBMsgPveLevelInfo(const PBMsgPveInfo_PBMsgPveLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMsgPveInfo_PBMsgPveLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0;
  highestscore_ = 0;
  higheststar_ = 0;
  highestspeed_ = 0;
  highestvitality_ = 0;
  highesttactics_ = 0;
  lastscore_ = 0;
  laststar_ = 0;
  lastspeed_ = 0;
  lastvitality_ = 0;
  lasttactics_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMsgPveInfo_PBMsgPveLevelInfo::~PBMsgPveInfo_PBMsgPveLevelInfo() {
  SharedDtor();
}

void PBMsgPveInfo_PBMsgPveLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMsgPveInfo_PBMsgPveLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgPveInfo_PBMsgPveLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgPveInfo_PBMsgPveLevelInfo_descriptor_;
}

const PBMsgPveInfo_PBMsgPveLevelInfo& PBMsgPveInfo_PBMsgPveLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgPveInfo_2eproto();
  return *default_instance_;
}

PBMsgPveInfo_PBMsgPveLevelInfo* PBMsgPveInfo_PBMsgPveLevelInfo::default_instance_ = NULL;

PBMsgPveInfo_PBMsgPveLevelInfo* PBMsgPveInfo_PBMsgPveLevelInfo::New() const {
  return new PBMsgPveInfo_PBMsgPveLevelInfo;
}

void PBMsgPveInfo_PBMsgPveLevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0;
    highestscore_ = 0;
    higheststar_ = 0;
    highestspeed_ = 0;
    highestvitality_ = 0;
    highesttactics_ = 0;
    lastscore_ = 0;
    laststar_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lastspeed_ = 0;
    lastvitality_ = 0;
    lasttactics_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMsgPveInfo_PBMsgPveLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_highestScore;
        break;
      }

      // optional int32 highestScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highestScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highestscore_)));
          set_has_highestscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_highestStar;
        break;
      }

      // optional int32 highestStar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highestStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &higheststar_)));
          set_has_higheststar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_highestSpeed;
        break;
      }

      // optional int32 highestSpeed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highestSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highestspeed_)));
          set_has_highestspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_highestVitality;
        break;
      }

      // optional int32 highestVitality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highestVitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highestvitality_)));
          set_has_highestvitality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_highestTactics;
        break;
      }

      // optional int32 highestTactics = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highestTactics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highesttactics_)));
          set_has_highesttactics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastScore;
        break;
      }

      // optional int32 lastScore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastscore_)));
          set_has_lastscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lastStar;
        break;
      }

      // optional int32 lastStar = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laststar_)));
          set_has_laststar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lastSpeed;
        break;
      }

      // optional int32 lastSpeed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastspeed_)));
          set_has_lastspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lastVitality;
        break;
      }

      // optional int32 lastVitality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastVitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastvitality_)));
          set_has_lastvitality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lastTactics;
        break;
      }

      // optional int32 lastTactics = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTactics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttactics_)));
          set_has_lasttactics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMsgPveInfo_PBMsgPveLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelid(), output);
  }

  // optional int32 highestScore = 2;
  if (has_highestscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->highestscore(), output);
  }

  // optional int32 highestStar = 3;
  if (has_higheststar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->higheststar(), output);
  }

  // optional int32 highestSpeed = 4;
  if (has_highestspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->highestspeed(), output);
  }

  // optional int32 highestVitality = 5;
  if (has_highestvitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->highestvitality(), output);
  }

  // optional int32 highestTactics = 6;
  if (has_highesttactics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->highesttactics(), output);
  }

  // optional int32 lastScore = 7;
  if (has_lastscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lastscore(), output);
  }

  // optional int32 lastStar = 8;
  if (has_laststar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->laststar(), output);
  }

  // optional int32 lastSpeed = 9;
  if (has_lastspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lastspeed(), output);
  }

  // optional int32 lastVitality = 10;
  if (has_lastvitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lastvitality(), output);
  }

  // optional int32 lastTactics = 11;
  if (has_lasttactics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lasttactics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMsgPveInfo_PBMsgPveLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelid(), target);
  }

  // optional int32 highestScore = 2;
  if (has_highestscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->highestscore(), target);
  }

  // optional int32 highestStar = 3;
  if (has_higheststar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->higheststar(), target);
  }

  // optional int32 highestSpeed = 4;
  if (has_highestspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->highestspeed(), target);
  }

  // optional int32 highestVitality = 5;
  if (has_highestvitality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->highestvitality(), target);
  }

  // optional int32 highestTactics = 6;
  if (has_highesttactics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->highesttactics(), target);
  }

  // optional int32 lastScore = 7;
  if (has_lastscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lastscore(), target);
  }

  // optional int32 lastStar = 8;
  if (has_laststar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->laststar(), target);
  }

  // optional int32 lastSpeed = 9;
  if (has_lastspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lastspeed(), target);
  }

  // optional int32 lastVitality = 10;
  if (has_lastvitality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lastvitality(), target);
  }

  // optional int32 lastTactics = 11;
  if (has_lasttactics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lasttactics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMsgPveInfo_PBMsgPveLevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelid());
    }

    // optional int32 highestScore = 2;
    if (has_highestscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highestscore());
    }

    // optional int32 highestStar = 3;
    if (has_higheststar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->higheststar());
    }

    // optional int32 highestSpeed = 4;
    if (has_highestspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highestspeed());
    }

    // optional int32 highestVitality = 5;
    if (has_highestvitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highestvitality());
    }

    // optional int32 highestTactics = 6;
    if (has_highesttactics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highesttactics());
    }

    // optional int32 lastScore = 7;
    if (has_lastscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastscore());
    }

    // optional int32 lastStar = 8;
    if (has_laststar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laststar());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lastSpeed = 9;
    if (has_lastspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastspeed());
    }

    // optional int32 lastVitality = 10;
    if (has_lastvitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastvitality());
    }

    // optional int32 lastTactics = 11;
    if (has_lasttactics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttactics());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgPveInfo_PBMsgPveLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMsgPveInfo_PBMsgPveLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMsgPveInfo_PBMsgPveLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgPveInfo_PBMsgPveLevelInfo::MergeFrom(const PBMsgPveInfo_PBMsgPveLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_highestscore()) {
      set_highestscore(from.highestscore());
    }
    if (from.has_higheststar()) {
      set_higheststar(from.higheststar());
    }
    if (from.has_highestspeed()) {
      set_highestspeed(from.highestspeed());
    }
    if (from.has_highestvitality()) {
      set_highestvitality(from.highestvitality());
    }
    if (from.has_highesttactics()) {
      set_highesttactics(from.highesttactics());
    }
    if (from.has_lastscore()) {
      set_lastscore(from.lastscore());
    }
    if (from.has_laststar()) {
      set_laststar(from.laststar());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastspeed()) {
      set_lastspeed(from.lastspeed());
    }
    if (from.has_lastvitality()) {
      set_lastvitality(from.lastvitality());
    }
    if (from.has_lasttactics()) {
      set_lasttactics(from.lasttactics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMsgPveInfo_PBMsgPveLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgPveInfo_PBMsgPveLevelInfo::CopyFrom(const PBMsgPveInfo_PBMsgPveLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgPveInfo_PBMsgPveLevelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBMsgPveInfo_PBMsgPveLevelInfo::Swap(PBMsgPveInfo_PBMsgPveLevelInfo* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(highestscore_, other->highestscore_);
    std::swap(higheststar_, other->higheststar_);
    std::swap(highestspeed_, other->highestspeed_);
    std::swap(highestvitality_, other->highestvitality_);
    std::swap(highesttactics_, other->highesttactics_);
    std::swap(lastscore_, other->lastscore_);
    std::swap(laststar_, other->laststar_);
    std::swap(lastspeed_, other->lastspeed_);
    std::swap(lastvitality_, other->lastvitality_);
    std::swap(lasttactics_, other->lasttactics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMsgPveInfo_PBMsgPveLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgPveInfo_PBMsgPveLevelInfo_descriptor_;
  metadata.reflection = PBMsgPveInfo_PBMsgPveLevelInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PBMsgPveInfo_PBMsgPveHidenBossInfo::kLevelIDFieldNumber;
const int PBMsgPveInfo_PBMsgPveHidenBossInfo::kActiveTimeFieldNumber;
#endif  // !_MSC_VER

PBMsgPveInfo_PBMsgPveHidenBossInfo::PBMsgPveInfo_PBMsgPveHidenBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::InitAsDefaultInstance() {
}

PBMsgPveInfo_PBMsgPveHidenBossInfo::PBMsgPveInfo_PBMsgPveHidenBossInfo(const PBMsgPveInfo_PBMsgPveHidenBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0;
  activetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMsgPveInfo_PBMsgPveHidenBossInfo::~PBMsgPveInfo_PBMsgPveHidenBossInfo() {
  SharedDtor();
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgPveInfo_PBMsgPveHidenBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgPveInfo_PBMsgPveHidenBossInfo_descriptor_;
}

const PBMsgPveInfo_PBMsgPveHidenBossInfo& PBMsgPveInfo_PBMsgPveHidenBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgPveInfo_2eproto();
  return *default_instance_;
}

PBMsgPveInfo_PBMsgPveHidenBossInfo* PBMsgPveInfo_PBMsgPveHidenBossInfo::default_instance_ = NULL;

PBMsgPveInfo_PBMsgPveHidenBossInfo* PBMsgPveInfo_PBMsgPveHidenBossInfo::New() const {
  return new PBMsgPveInfo_PBMsgPveHidenBossInfo;
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0;
    activetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMsgPveInfo_PBMsgPveHidenBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activeTime;
        break;
      }

      // optional int64 activeTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activetime_)));
          set_has_activetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelid(), output);
  }

  // optional int64 activeTime = 2;
  if (has_activetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->activetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMsgPveInfo_PBMsgPveHidenBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelid(), target);
  }

  // optional int64 activeTime = 2;
  if (has_activetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->activetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMsgPveInfo_PBMsgPveHidenBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelid());
    }

    // optional int64 activeTime = 2;
    if (has_activetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMsgPveInfo_PBMsgPveHidenBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMsgPveInfo_PBMsgPveHidenBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::MergeFrom(const PBMsgPveInfo_PBMsgPveHidenBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_activetime()) {
      set_activetime(from.activetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::CopyFrom(const PBMsgPveInfo_PBMsgPveHidenBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgPveInfo_PBMsgPveHidenBossInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBMsgPveInfo_PBMsgPveHidenBossInfo::Swap(PBMsgPveInfo_PBMsgPveHidenBossInfo* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(activetime_, other->activetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMsgPveInfo_PBMsgPveHidenBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgPveInfo_PBMsgPveHidenBossInfo_descriptor_;
  metadata.reflection = PBMsgPveInfo_PBMsgPveHidenBossInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PBMsgPveInfo::kTotalScoreFieldNumber;
const int PBMsgPveInfo::kTotalStarsFieldNumber;
const int PBMsgPveInfo::kLevelInfoFieldNumber;
const int PBMsgPveInfo::kStaminaInfoFieldNumber;
const int PBMsgPveInfo::kResultInfoFieldNumber;
const int PBMsgPveInfo::kMarchInfoFieldNumber;
const int PBMsgPveInfo::kHidenBossInfoFieldNumber;
#endif  // !_MSC_VER

PBMsgPveInfo::PBMsgPveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMsgPveInfo::InitAsDefaultInstance() {
}

PBMsgPveInfo::PBMsgPveInfo(const PBMsgPveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMsgPveInfo::SharedCtor() {
  _cached_size_ = 0;
  totalscore_ = 0;
  totalstars_ = 0;
  staminainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resultinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  marchinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMsgPveInfo::~PBMsgPveInfo() {
  SharedDtor();
}

void PBMsgPveInfo::SharedDtor() {
  if (staminainfo_ != &::google::protobuf::internal::kEmptyString) {
    delete staminainfo_;
  }
  if (resultinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete resultinfo_;
  }
  if (marchinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete marchinfo_;
  }
  if (this != default_instance_) {
  }
}

void PBMsgPveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgPveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgPveInfo_descriptor_;
}

const PBMsgPveInfo& PBMsgPveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgPveInfo_2eproto();
  return *default_instance_;
}

PBMsgPveInfo* PBMsgPveInfo::default_instance_ = NULL;

PBMsgPveInfo* PBMsgPveInfo::New() const {
  return new PBMsgPveInfo;
}

void PBMsgPveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalscore_ = 0;
    totalstars_ = 0;
    if (has_staminainfo()) {
      if (staminainfo_ != &::google::protobuf::internal::kEmptyString) {
        staminainfo_->clear();
      }
    }
    if (has_resultinfo()) {
      if (resultinfo_ != &::google::protobuf::internal::kEmptyString) {
        resultinfo_->clear();
      }
    }
    if (has_marchinfo()) {
      if (marchinfo_ != &::google::protobuf::internal::kEmptyString) {
        marchinfo_->clear();
      }
    }
  }
  levelinfo_.Clear();
  hidenbossinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMsgPveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalStars;
        break;
      }

      // optional int32 totalStars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalStars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalstars_)));
          set_has_totalstars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_levelInfo;
        break;
      }

      // repeated .PBMsgPveInfo.PBMsgPveLevelInfo levelInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_levelInfo;
        if (input->ExpectTag(34)) goto parse_staminaInfo;
        break;
      }

      // optional bytes staminaInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_staminaInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_staminainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resultInfo;
        break;
      }

      // optional bytes resultInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resultinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_marchInfo;
        break;
      }

      // optional bytes marchInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marchInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marchinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_hidenBossInfo;
        break;
      }

      // repeated .PBMsgPveInfo.PBMsgPveHidenBossInfo hidenBossInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hidenBossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hidenbossinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_hidenBossInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMsgPveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 totalScore = 1;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalscore(), output);
  }

  // optional int32 totalStars = 2;
  if (has_totalstars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalstars(), output);
  }

  // repeated .PBMsgPveInfo.PBMsgPveLevelInfo levelInfo = 3;
  for (int i = 0; i < this->levelinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->levelinfo(i), output);
  }

  // optional bytes staminaInfo = 4;
  if (has_staminainfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->staminainfo(), output);
  }

  // optional bytes resultInfo = 5;
  if (has_resultinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->resultinfo(), output);
  }

  // optional bytes marchInfo = 6;
  if (has_marchinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->marchinfo(), output);
  }

  // repeated .PBMsgPveInfo.PBMsgPveHidenBossInfo hidenBossInfo = 7;
  for (int i = 0; i < this->hidenbossinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hidenbossinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMsgPveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 totalScore = 1;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalscore(), target);
  }

  // optional int32 totalStars = 2;
  if (has_totalstars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalstars(), target);
  }

  // repeated .PBMsgPveInfo.PBMsgPveLevelInfo levelInfo = 3;
  for (int i = 0; i < this->levelinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->levelinfo(i), target);
  }

  // optional bytes staminaInfo = 4;
  if (has_staminainfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->staminainfo(), target);
  }

  // optional bytes resultInfo = 5;
  if (has_resultinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->resultinfo(), target);
  }

  // optional bytes marchInfo = 6;
  if (has_marchinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->marchinfo(), target);
  }

  // repeated .PBMsgPveInfo.PBMsgPveHidenBossInfo hidenBossInfo = 7;
  for (int i = 0; i < this->hidenbossinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->hidenbossinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMsgPveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalScore = 1;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

    // optional int32 totalStars = 2;
    if (has_totalstars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalstars());
    }

    // optional bytes staminaInfo = 4;
    if (has_staminainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->staminainfo());
    }

    // optional bytes resultInfo = 5;
    if (has_resultinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resultinfo());
    }

    // optional bytes marchInfo = 6;
    if (has_marchinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marchinfo());
    }

  }
  // repeated .PBMsgPveInfo.PBMsgPveLevelInfo levelInfo = 3;
  total_size += 1 * this->levelinfo_size();
  for (int i = 0; i < this->levelinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelinfo(i));
  }

  // repeated .PBMsgPveInfo.PBMsgPveHidenBossInfo hidenBossInfo = 7;
  total_size += 1 * this->hidenbossinfo_size();
  for (int i = 0; i < this->hidenbossinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hidenbossinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgPveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMsgPveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMsgPveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgPveInfo::MergeFrom(const PBMsgPveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelinfo_.MergeFrom(from.levelinfo_);
  hidenbossinfo_.MergeFrom(from.hidenbossinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_totalstars()) {
      set_totalstars(from.totalstars());
    }
    if (from.has_staminainfo()) {
      set_staminainfo(from.staminainfo());
    }
    if (from.has_resultinfo()) {
      set_resultinfo(from.resultinfo());
    }
    if (from.has_marchinfo()) {
      set_marchinfo(from.marchinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMsgPveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgPveInfo::CopyFrom(const PBMsgPveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgPveInfo::IsInitialized() const {

  for (int i = 0; i < levelinfo_size(); i++) {
    if (!this->levelinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hidenbossinfo_size(); i++) {
    if (!this->hidenbossinfo(i).IsInitialized()) return false;
  }
  return true;
}

void PBMsgPveInfo::Swap(PBMsgPveInfo* other) {
  if (other != this) {
    std::swap(totalscore_, other->totalscore_);
    std::swap(totalstars_, other->totalstars_);
    levelinfo_.Swap(&other->levelinfo_);
    std::swap(staminainfo_, other->staminainfo_);
    std::swap(resultinfo_, other->resultinfo_);
    std::swap(marchinfo_, other->marchinfo_);
    hidenbossinfo_.Swap(&other->hidenbossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMsgPveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgPveInfo_descriptor_;
  metadata.reflection = PBMsgPveInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
