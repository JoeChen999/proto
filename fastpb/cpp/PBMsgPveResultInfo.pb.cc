// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgPveResultInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMsgPveResultInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBMsgPveResultInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgPveResultInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMsgPveResultInfo_2eproto() {
  protobuf_AddDesc_PBMsgPveResultInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMsgPveResultInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PBMsgPveResultInfo_descriptor_ = file->message_type(0);
  static const int PBMsgPveResultInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, tactics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, ishighest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, item_),
  };
  PBMsgPveResultInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMsgPveResultInfo_descriptor_,
      PBMsgPveResultInfo::default_instance_,
      PBMsgPveResultInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPveResultInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMsgPveResultInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMsgPveResultInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMsgPveResultInfo_descriptor_, &PBMsgPveResultInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMsgPveResultInfo_2eproto() {
  delete PBMsgPveResultInfo::default_instance_;
  delete PBMsgPveResultInfo_reflection_;
}

void protobuf_AddDesc_PBMsgPveResultInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030PBMsgPveResultInfo.proto\"\225\001\n\022PBMsgPveR"
    "esultInfo\022\017\n\007levelID\030\001 \002(\005\022\r\n\005score\030\002 \001("
    "\005\022\014\n\004star\030\003 \001(\005\022\r\n\005speed\030\004 \001(\005\022\020\n\010vitali"
    "ty\030\005 \001(\005\022\017\n\007tactics\030\006 \001(\005\022\021\n\tisHighest\030\007"
    " \001(\010\022\014\n\004item\030\010 \003(\005", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMsgPveResultInfo.proto", &protobuf_RegisterTypes);
  PBMsgPveResultInfo::default_instance_ = new PBMsgPveResultInfo();
  PBMsgPveResultInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMsgPveResultInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMsgPveResultInfo_2eproto {
  StaticDescriptorInitializer_PBMsgPveResultInfo_2eproto() {
    protobuf_AddDesc_PBMsgPveResultInfo_2eproto();
  }
} static_descriptor_initializer_PBMsgPveResultInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBMsgPveResultInfo::kLevelIDFieldNumber;
const int PBMsgPveResultInfo::kScoreFieldNumber;
const int PBMsgPveResultInfo::kStarFieldNumber;
const int PBMsgPveResultInfo::kSpeedFieldNumber;
const int PBMsgPveResultInfo::kVitalityFieldNumber;
const int PBMsgPveResultInfo::kTacticsFieldNumber;
const int PBMsgPveResultInfo::kIsHighestFieldNumber;
const int PBMsgPveResultInfo::kItemFieldNumber;
#endif  // !_MSC_VER

PBMsgPveResultInfo::PBMsgPveResultInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMsgPveResultInfo::InitAsDefaultInstance() {
}

PBMsgPveResultInfo::PBMsgPveResultInfo(const PBMsgPveResultInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMsgPveResultInfo::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0;
  score_ = 0;
  star_ = 0;
  speed_ = 0;
  vitality_ = 0;
  tactics_ = 0;
  ishighest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMsgPveResultInfo::~PBMsgPveResultInfo() {
  SharedDtor();
}

void PBMsgPveResultInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMsgPveResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgPveResultInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgPveResultInfo_descriptor_;
}

const PBMsgPveResultInfo& PBMsgPveResultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgPveResultInfo_2eproto();
  return *default_instance_;
}

PBMsgPveResultInfo* PBMsgPveResultInfo::default_instance_ = NULL;

PBMsgPveResultInfo* PBMsgPveResultInfo::New() const {
  return new PBMsgPveResultInfo;
}

void PBMsgPveResultInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0;
    score_ = 0;
    star_ = 0;
    speed_ = 0;
    vitality_ = 0;
    tactics_ = 0;
    ishighest_ = false;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMsgPveResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_speed;
        break;
      }

      // optional int32 speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vitality;
        break;
      }

      // optional int32 vitality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vitality_)));
          set_has_vitality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tactics;
        break;
      }

      // optional int32 tactics = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tactics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tactics_)));
          set_has_tactics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isHighest;
        break;
      }

      // optional bool isHighest = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHighest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishighest_)));
          set_has_ishighest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item;
        break;
      }

      // repeated int32 item = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_item())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMsgPveResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelid(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed(), output);
  }

  // optional int32 vitality = 5;
  if (has_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vitality(), output);
  }

  // optional int32 tactics = 6;
  if (has_tactics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tactics(), output);
  }

  // optional bool isHighest = 7;
  if (has_ishighest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ishighest(), output);
  }

  // repeated int32 item = 8;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMsgPveResultInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelid(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->speed(), target);
  }

  // optional int32 vitality = 5;
  if (has_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vitality(), target);
  }

  // optional int32 tactics = 6;
  if (has_tactics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tactics(), target);
  }

  // optional bool isHighest = 7;
  if (has_ishighest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ishighest(), target);
  }

  // repeated int32 item = 8;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMsgPveResultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelid());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 vitality = 5;
    if (has_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vitality());
    }

    // optional int32 tactics = 6;
    if (has_tactics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tactics());
    }

    // optional bool isHighest = 7;
    if (has_ishighest()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 item = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item(i));
    }
    total_size += 1 * this->item_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgPveResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMsgPveResultInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMsgPveResultInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgPveResultInfo::MergeFrom(const PBMsgPveResultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_vitality()) {
      set_vitality(from.vitality());
    }
    if (from.has_tactics()) {
      set_tactics(from.tactics());
    }
    if (from.has_ishighest()) {
      set_ishighest(from.ishighest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMsgPveResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgPveResultInfo::CopyFrom(const PBMsgPveResultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgPveResultInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBMsgPveResultInfo::Swap(PBMsgPveResultInfo* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(score_, other->score_);
    std::swap(star_, other->star_);
    std::swap(speed_, other->speed_);
    std::swap(vitality_, other->vitality_);
    std::swap(tactics_, other->tactics_);
    std::swap(ishighest_, other->ishighest_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMsgPveResultInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgPveResultInfo_descriptor_;
  metadata.reflection = PBMsgPveResultInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
