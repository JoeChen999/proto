// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgHeader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMsgHeader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBMsgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMsgHeader_2eproto() {
  protobuf_AddDesc_PBMsgHeader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMsgHeader.proto");
  GOOGLE_CHECK(file != NULL);
  PBMsgHeader_descriptor_ = file->message_type(0);
  static const int PBMsgHeader_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, naid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, gcuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, gcunick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, mobileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, platformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, becomeuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, becomepassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, gver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, gameslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, newlang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, gamenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, kabamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, access_token_),
  };
  PBMsgHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMsgHeader_descriptor_,
      PBMsgHeader::default_instance_,
      PBMsgHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMsgHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMsgHeader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMsgHeader_descriptor_, &PBMsgHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMsgHeader_2eproto() {
  delete PBMsgHeader::default_instance_;
  delete PBMsgHeader_reflection_;
}

void protobuf_AddDesc_PBMsgHeader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021PBMsgHeader.proto\"\231\002\n\013PBMsgHeader\022\014\n\004n"
    "aId\030\001 \002(\t\022\r\n\005gcUid\030\002 \002(\t\022\017\n\007gcUnick\030\003 \002("
    "\t\022\020\n\010mobileId\030\004 \002(\t\022\022\n\nplatformId\030\005 \002(\005\022"
    "\024\n\014becomeUserId\030\006 \002(\t\022\026\n\016becomePassword\030"
    "\007 \002(\t\022\r\n\005debug\030\010 \002(\005\022\014\n\004gVer\030\t \002(\t\022\020\n\010ga"
    "meSlot\030\n \002(\003\022\r\n\005theme\030\013 \002(\005\022\017\n\007newLang\030\014"
    " \002(\t\022\022\n\ngameNumber\030\r \002(\003\022\017\n\007kabamId\030\016 \001("
    "\t\022\024\n\014access_token\030\017 \001(\t", 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMsgHeader.proto", &protobuf_RegisterTypes);
  PBMsgHeader::default_instance_ = new PBMsgHeader();
  PBMsgHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMsgHeader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMsgHeader_2eproto {
  StaticDescriptorInitializer_PBMsgHeader_2eproto() {
    protobuf_AddDesc_PBMsgHeader_2eproto();
  }
} static_descriptor_initializer_PBMsgHeader_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBMsgHeader::kNaIdFieldNumber;
const int PBMsgHeader::kGcUidFieldNumber;
const int PBMsgHeader::kGcUnickFieldNumber;
const int PBMsgHeader::kMobileIdFieldNumber;
const int PBMsgHeader::kPlatformIdFieldNumber;
const int PBMsgHeader::kBecomeUserIdFieldNumber;
const int PBMsgHeader::kBecomePasswordFieldNumber;
const int PBMsgHeader::kDebugFieldNumber;
const int PBMsgHeader::kGVerFieldNumber;
const int PBMsgHeader::kGameSlotFieldNumber;
const int PBMsgHeader::kThemeFieldNumber;
const int PBMsgHeader::kNewLangFieldNumber;
const int PBMsgHeader::kGameNumberFieldNumber;
const int PBMsgHeader::kKabamIdFieldNumber;
const int PBMsgHeader::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

PBMsgHeader::PBMsgHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMsgHeader::InitAsDefaultInstance() {
}

PBMsgHeader::PBMsgHeader(const PBMsgHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMsgHeader::SharedCtor() {
  _cached_size_ = 0;
  naid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gcuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gcunick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobileid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platformid_ = 0;
  becomeuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  becomepassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debug_ = 0;
  gver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameslot_ = GOOGLE_LONGLONG(0);
  theme_ = 0;
  newlang_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamenumber_ = GOOGLE_LONGLONG(0);
  kabamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMsgHeader::~PBMsgHeader() {
  SharedDtor();
}

void PBMsgHeader::SharedDtor() {
  if (naid_ != &::google::protobuf::internal::kEmptyString) {
    delete naid_;
  }
  if (gcuid_ != &::google::protobuf::internal::kEmptyString) {
    delete gcuid_;
  }
  if (gcunick_ != &::google::protobuf::internal::kEmptyString) {
    delete gcunick_;
  }
  if (mobileid_ != &::google::protobuf::internal::kEmptyString) {
    delete mobileid_;
  }
  if (becomeuserid_ != &::google::protobuf::internal::kEmptyString) {
    delete becomeuserid_;
  }
  if (becomepassword_ != &::google::protobuf::internal::kEmptyString) {
    delete becomepassword_;
  }
  if (gver_ != &::google::protobuf::internal::kEmptyString) {
    delete gver_;
  }
  if (newlang_ != &::google::protobuf::internal::kEmptyString) {
    delete newlang_;
  }
  if (kabamid_ != &::google::protobuf::internal::kEmptyString) {
    delete kabamid_;
  }
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void PBMsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgHeader_descriptor_;
}

const PBMsgHeader& PBMsgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgHeader_2eproto();
  return *default_instance_;
}

PBMsgHeader* PBMsgHeader::default_instance_ = NULL;

PBMsgHeader* PBMsgHeader::New() const {
  return new PBMsgHeader;
}

void PBMsgHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_naid()) {
      if (naid_ != &::google::protobuf::internal::kEmptyString) {
        naid_->clear();
      }
    }
    if (has_gcuid()) {
      if (gcuid_ != &::google::protobuf::internal::kEmptyString) {
        gcuid_->clear();
      }
    }
    if (has_gcunick()) {
      if (gcunick_ != &::google::protobuf::internal::kEmptyString) {
        gcunick_->clear();
      }
    }
    if (has_mobileid()) {
      if (mobileid_ != &::google::protobuf::internal::kEmptyString) {
        mobileid_->clear();
      }
    }
    platformid_ = 0;
    if (has_becomeuserid()) {
      if (becomeuserid_ != &::google::protobuf::internal::kEmptyString) {
        becomeuserid_->clear();
      }
    }
    if (has_becomepassword()) {
      if (becomepassword_ != &::google::protobuf::internal::kEmptyString) {
        becomepassword_->clear();
      }
    }
    debug_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_gver()) {
      if (gver_ != &::google::protobuf::internal::kEmptyString) {
        gver_->clear();
      }
    }
    gameslot_ = GOOGLE_LONGLONG(0);
    theme_ = 0;
    if (has_newlang()) {
      if (newlang_ != &::google::protobuf::internal::kEmptyString) {
        newlang_->clear();
      }
    }
    gamenumber_ = GOOGLE_LONGLONG(0);
    if (has_kabamid()) {
      if (kabamid_ != &::google::protobuf::internal::kEmptyString) {
        kabamid_->clear();
      }
    }
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string naId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_naid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->naid().data(), this->naid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gcUid;
        break;
      }

      // required string gcUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gcUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gcuid().data(), this->gcuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gcUnick;
        break;
      }

      // required string gcUnick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gcUnick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcunick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gcunick().data(), this->gcunick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mobileId;
        break;
      }

      // required string mobileId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobileId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobileid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobileid().data(), this->mobileid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_platformId;
        break;
      }

      // required int32 platformId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platformId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platformid_)));
          set_has_platformid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_becomeUserId;
        break;
      }

      // required string becomeUserId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_becomeUserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_becomeuserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->becomeuserid().data(), this->becomeuserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_becomePassword;
        break;
      }

      // required string becomePassword = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_becomePassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_becomepassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->becomepassword().data(), this->becomepassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_debug;
        break;
      }

      // required int32 debug = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debug_)));
          set_has_debug();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_gVer;
        break;
      }

      // required string gVer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gver().data(), this->gver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gameSlot;
        break;
      }

      // required int64 gameSlot = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gameslot_)));
          set_has_gameslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_theme;
        break;
      }

      // required int32 theme = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_theme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &theme_)));
          set_has_theme();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_newLang;
        break;
      }

      // required string newLang = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newLang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newlang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newlang().data(), this->newlang().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_gameNumber;
        break;
      }

      // required int64 gameNumber = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gamenumber_)));
          set_has_gamenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_kabamId;
        break;
      }

      // optional string kabamId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kabamId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kabamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kabamid().data(), this->kabamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_access_token;
        break;
      }

      // optional string access_token = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string naId = 1;
  if (has_naid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->naid().data(), this->naid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->naid(), output);
  }

  // required string gcUid = 2;
  if (has_gcuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcuid().data(), this->gcuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gcuid(), output);
  }

  // required string gcUnick = 3;
  if (has_gcunick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcunick().data(), this->gcunick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gcunick(), output);
  }

  // required string mobileId = 4;
  if (has_mobileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobileid().data(), this->mobileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mobileid(), output);
  }

  // required int32 platformId = 5;
  if (has_platformid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->platformid(), output);
  }

  // required string becomeUserId = 6;
  if (has_becomeuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->becomeuserid().data(), this->becomeuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->becomeuserid(), output);
  }

  // required string becomePassword = 7;
  if (has_becomepassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->becomepassword().data(), this->becomepassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->becomepassword(), output);
  }

  // required int32 debug = 8;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->debug(), output);
  }

  // required string gVer = 9;
  if (has_gver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gver().data(), this->gver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->gver(), output);
  }

  // required int64 gameSlot = 10;
  if (has_gameslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->gameslot(), output);
  }

  // required int32 theme = 11;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->theme(), output);
  }

  // required string newLang = 12;
  if (has_newlang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newlang().data(), this->newlang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->newlang(), output);
  }

  // required int64 gameNumber = 13;
  if (has_gamenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->gamenumber(), output);
  }

  // optional string kabamId = 14;
  if (has_kabamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kabamid().data(), this->kabamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->kabamid(), output);
  }

  // optional string access_token = 15;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMsgHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string naId = 1;
  if (has_naid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->naid().data(), this->naid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->naid(), target);
  }

  // required string gcUid = 2;
  if (has_gcuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcuid().data(), this->gcuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gcuid(), target);
  }

  // required string gcUnick = 3;
  if (has_gcunick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcunick().data(), this->gcunick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gcunick(), target);
  }

  // required string mobileId = 4;
  if (has_mobileid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobileid().data(), this->mobileid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mobileid(), target);
  }

  // required int32 platformId = 5;
  if (has_platformid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->platformid(), target);
  }

  // required string becomeUserId = 6;
  if (has_becomeuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->becomeuserid().data(), this->becomeuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->becomeuserid(), target);
  }

  // required string becomePassword = 7;
  if (has_becomepassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->becomepassword().data(), this->becomepassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->becomepassword(), target);
  }

  // required int32 debug = 8;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->debug(), target);
  }

  // required string gVer = 9;
  if (has_gver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gver().data(), this->gver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->gver(), target);
  }

  // required int64 gameSlot = 10;
  if (has_gameslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->gameslot(), target);
  }

  // required int32 theme = 11;
  if (has_theme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->theme(), target);
  }

  // required string newLang = 12;
  if (has_newlang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newlang().data(), this->newlang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->newlang(), target);
  }

  // required int64 gameNumber = 13;
  if (has_gamenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->gamenumber(), target);
  }

  // optional string kabamId = 14;
  if (has_kabamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kabamid().data(), this->kabamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->kabamid(), target);
  }

  // optional string access_token = 15;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMsgHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string naId = 1;
    if (has_naid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->naid());
    }

    // required string gcUid = 2;
    if (has_gcuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gcuid());
    }

    // required string gcUnick = 3;
    if (has_gcunick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gcunick());
    }

    // required string mobileId = 4;
    if (has_mobileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobileid());
    }

    // required int32 platformId = 5;
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platformid());
    }

    // required string becomeUserId = 6;
    if (has_becomeuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->becomeuserid());
    }

    // required string becomePassword = 7;
    if (has_becomepassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->becomepassword());
    }

    // required int32 debug = 8;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debug());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string gVer = 9;
    if (has_gver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gver());
    }

    // required int64 gameSlot = 10;
    if (has_gameslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gameslot());
    }

    // required int32 theme = 11;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->theme());
    }

    // required string newLang = 12;
    if (has_newlang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newlang());
    }

    // required int64 gameNumber = 13;
    if (has_gamenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gamenumber());
    }

    // optional string kabamId = 14;
    if (has_kabamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kabamid());
    }

    // optional string access_token = 15;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMsgHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMsgHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgHeader::MergeFrom(const PBMsgHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_naid()) {
      set_naid(from.naid());
    }
    if (from.has_gcuid()) {
      set_gcuid(from.gcuid());
    }
    if (from.has_gcunick()) {
      set_gcunick(from.gcunick());
    }
    if (from.has_mobileid()) {
      set_mobileid(from.mobileid());
    }
    if (from.has_platformid()) {
      set_platformid(from.platformid());
    }
    if (from.has_becomeuserid()) {
      set_becomeuserid(from.becomeuserid());
    }
    if (from.has_becomepassword()) {
      set_becomepassword(from.becomepassword());
    }
    if (from.has_debug()) {
      set_debug(from.debug());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gver()) {
      set_gver(from.gver());
    }
    if (from.has_gameslot()) {
      set_gameslot(from.gameslot());
    }
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_newlang()) {
      set_newlang(from.newlang());
    }
    if (from.has_gamenumber()) {
      set_gamenumber(from.gamenumber());
    }
    if (from.has_kabamid()) {
      set_kabamid(from.kabamid());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgHeader::CopyFrom(const PBMsgHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void PBMsgHeader::Swap(PBMsgHeader* other) {
  if (other != this) {
    std::swap(naid_, other->naid_);
    std::swap(gcuid_, other->gcuid_);
    std::swap(gcunick_, other->gcunick_);
    std::swap(mobileid_, other->mobileid_);
    std::swap(platformid_, other->platformid_);
    std::swap(becomeuserid_, other->becomeuserid_);
    std::swap(becomepassword_, other->becomepassword_);
    std::swap(debug_, other->debug_);
    std::swap(gver_, other->gver_);
    std::swap(gameslot_, other->gameslot_);
    std::swap(theme_, other->theme_);
    std::swap(newlang_, other->newlang_);
    std::swap(gamenumber_, other->gamenumber_);
    std::swap(kabamid_, other->kabamid_);
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMsgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgHeader_descriptor_;
  metadata.reflection = PBMsgHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
