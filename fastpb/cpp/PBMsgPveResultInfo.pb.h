// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgPveResultInfo.proto

#ifndef PROTOBUF_PBMsgPveResultInfo_2eproto__INCLUDED
#define PROTOBUF_PBMsgPveResultInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PBMsgPveResultInfo_2eproto();
void protobuf_AssignDesc_PBMsgPveResultInfo_2eproto();
void protobuf_ShutdownFile_PBMsgPveResultInfo_2eproto();

class PBMsgPveResultInfo;

// ===================================================================

class PBMsgPveResultInfo : public ::google::protobuf::Message {
 public:
  PBMsgPveResultInfo();
  virtual ~PBMsgPveResultInfo();

  PBMsgPveResultInfo(const PBMsgPveResultInfo& from);

  inline PBMsgPveResultInfo& operator=(const PBMsgPveResultInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgPveResultInfo& default_instance();

  void Swap(PBMsgPveResultInfo* other);

  // implements Message ----------------------------------------------

  PBMsgPveResultInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgPveResultInfo& from);
  void MergeFrom(const PBMsgPveResultInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::int32 levelid() const;
  inline void set_levelid(::google::protobuf::int32 value);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);

  // optional int32 vitality = 5;
  inline bool has_vitality() const;
  inline void clear_vitality();
  static const int kVitalityFieldNumber = 5;
  inline ::google::protobuf::int32 vitality() const;
  inline void set_vitality(::google::protobuf::int32 value);

  // optional int32 tactics = 6;
  inline bool has_tactics() const;
  inline void clear_tactics();
  static const int kTacticsFieldNumber = 6;
  inline ::google::protobuf::int32 tactics() const;
  inline void set_tactics(::google::protobuf::int32 value);

  // optional bool isHighest = 7;
  inline bool has_ishighest() const;
  inline void clear_ishighest();
  static const int kIsHighestFieldNumber = 7;
  inline bool ishighest() const;
  inline void set_ishighest(bool value);

  // repeated int32 item = 8;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 8;
  inline ::google::protobuf::int32 item(int index) const;
  inline void set_item(int index, ::google::protobuf::int32 value);
  inline void add_item(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:PBMsgPveResultInfo)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_vitality();
  inline void clear_has_vitality();
  inline void set_has_tactics();
  inline void clear_has_tactics();
  inline void set_has_ishighest();
  inline void clear_has_ishighest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 levelid_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 vitality_;
  ::google::protobuf::int32 tactics_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_;
  bool ishighest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PBMsgPveResultInfo_2eproto();
  friend void protobuf_AssignDesc_PBMsgPveResultInfo_2eproto();
  friend void protobuf_ShutdownFile_PBMsgPveResultInfo_2eproto();

  void InitAsDefaultInstance();
  static PBMsgPveResultInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PBMsgPveResultInfo

// required int32 levelID = 1;
inline bool PBMsgPveResultInfo::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMsgPveResultInfo::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMsgPveResultInfo::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMsgPveResultInfo::clear_levelid() {
  levelid_ = 0;
  clear_has_levelid();
}
inline ::google::protobuf::int32 PBMsgPveResultInfo::levelid() const {
  return levelid_;
}
inline void PBMsgPveResultInfo::set_levelid(::google::protobuf::int32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional int32 score = 2;
inline bool PBMsgPveResultInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMsgPveResultInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMsgPveResultInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMsgPveResultInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 PBMsgPveResultInfo::score() const {
  return score_;
}
inline void PBMsgPveResultInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 star = 3;
inline bool PBMsgPveResultInfo::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMsgPveResultInfo::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMsgPveResultInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMsgPveResultInfo::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 PBMsgPveResultInfo::star() const {
  return star_;
}
inline void PBMsgPveResultInfo::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 speed = 4;
inline bool PBMsgPveResultInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBMsgPveResultInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBMsgPveResultInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBMsgPveResultInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 PBMsgPveResultInfo::speed() const {
  return speed_;
}
inline void PBMsgPveResultInfo::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
}

// optional int32 vitality = 5;
inline bool PBMsgPveResultInfo::has_vitality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBMsgPveResultInfo::set_has_vitality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBMsgPveResultInfo::clear_has_vitality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBMsgPveResultInfo::clear_vitality() {
  vitality_ = 0;
  clear_has_vitality();
}
inline ::google::protobuf::int32 PBMsgPveResultInfo::vitality() const {
  return vitality_;
}
inline void PBMsgPveResultInfo::set_vitality(::google::protobuf::int32 value) {
  set_has_vitality();
  vitality_ = value;
}

// optional int32 tactics = 6;
inline bool PBMsgPveResultInfo::has_tactics() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBMsgPveResultInfo::set_has_tactics() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBMsgPveResultInfo::clear_has_tactics() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBMsgPveResultInfo::clear_tactics() {
  tactics_ = 0;
  clear_has_tactics();
}
inline ::google::protobuf::int32 PBMsgPveResultInfo::tactics() const {
  return tactics_;
}
inline void PBMsgPveResultInfo::set_tactics(::google::protobuf::int32 value) {
  set_has_tactics();
  tactics_ = value;
}

// optional bool isHighest = 7;
inline bool PBMsgPveResultInfo::has_ishighest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBMsgPveResultInfo::set_has_ishighest() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBMsgPveResultInfo::clear_has_ishighest() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBMsgPveResultInfo::clear_ishighest() {
  ishighest_ = false;
  clear_has_ishighest();
}
inline bool PBMsgPveResultInfo::ishighest() const {
  return ishighest_;
}
inline void PBMsgPveResultInfo::set_ishighest(bool value) {
  set_has_ishighest();
  ishighest_ = value;
}

// repeated int32 item = 8;
inline int PBMsgPveResultInfo::item_size() const {
  return item_.size();
}
inline void PBMsgPveResultInfo::clear_item() {
  item_.Clear();
}
inline ::google::protobuf::int32 PBMsgPveResultInfo::item(int index) const {
  return item_.Get(index);
}
inline void PBMsgPveResultInfo::set_item(int index, ::google::protobuf::int32 value) {
  item_.Set(index, value);
}
inline void PBMsgPveResultInfo::add_item(::google::protobuf::int32 value) {
  item_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBMsgPveResultInfo::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBMsgPveResultInfo::mutable_item() {
  return &item_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PBMsgPveResultInfo_2eproto__INCLUDED
