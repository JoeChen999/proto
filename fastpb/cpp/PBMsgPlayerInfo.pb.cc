// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgPlayerInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PBMsgPlayerInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBMsgPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMsgPlayerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PBMsgPlayerInfo_2eproto() {
  protobuf_AddDesc_PBMsgPlayerInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PBMsgPlayerInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PBMsgPlayerInfo_descriptor_ = file->message_type(0);
  static const int PBMsgPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPlayerInfo, pvever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPlayerInfo, pveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPlayerInfo, herover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPlayerInfo, heroinfo_),
  };
  PBMsgPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMsgPlayerInfo_descriptor_,
      PBMsgPlayerInfo::default_instance_,
      PBMsgPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMsgPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMsgPlayerInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PBMsgPlayerInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMsgPlayerInfo_descriptor_, &PBMsgPlayerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PBMsgPlayerInfo_2eproto() {
  delete PBMsgPlayerInfo::default_instance_;
  delete PBMsgPlayerInfo_reflection_;
}

void protobuf_AddDesc_PBMsgPlayerInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025PBMsgPlayerInfo.proto\"U\n\017PBMsgPlayerIn"
    "fo\022\016\n\006pveVer\030\001 \001(\t\022\017\n\007pveInfo\030\002 \001(\014\022\017\n\007h"
    "eroVer\030\003 \001(\t\022\020\n\010heroInfo\030\004 \001(\014", 110);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PBMsgPlayerInfo.proto", &protobuf_RegisterTypes);
  PBMsgPlayerInfo::default_instance_ = new PBMsgPlayerInfo();
  PBMsgPlayerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PBMsgPlayerInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PBMsgPlayerInfo_2eproto {
  StaticDescriptorInitializer_PBMsgPlayerInfo_2eproto() {
    protobuf_AddDesc_PBMsgPlayerInfo_2eproto();
  }
} static_descriptor_initializer_PBMsgPlayerInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PBMsgPlayerInfo::kPveVerFieldNumber;
const int PBMsgPlayerInfo::kPveInfoFieldNumber;
const int PBMsgPlayerInfo::kHeroVerFieldNumber;
const int PBMsgPlayerInfo::kHeroInfoFieldNumber;
#endif  // !_MSC_VER

PBMsgPlayerInfo::PBMsgPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMsgPlayerInfo::InitAsDefaultInstance() {
}

PBMsgPlayerInfo::PBMsgPlayerInfo(const PBMsgPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMsgPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  pvever_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pveinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  herover_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  heroinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMsgPlayerInfo::~PBMsgPlayerInfo() {
  SharedDtor();
}

void PBMsgPlayerInfo::SharedDtor() {
  if (pvever_ != &::google::protobuf::internal::kEmptyString) {
    delete pvever_;
  }
  if (pveinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete pveinfo_;
  }
  if (herover_ != &::google::protobuf::internal::kEmptyString) {
    delete herover_;
  }
  if (heroinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete heroinfo_;
  }
  if (this != default_instance_) {
  }
}

void PBMsgPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMsgPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMsgPlayerInfo_descriptor_;
}

const PBMsgPlayerInfo& PBMsgPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PBMsgPlayerInfo_2eproto();
  return *default_instance_;
}

PBMsgPlayerInfo* PBMsgPlayerInfo::default_instance_ = NULL;

PBMsgPlayerInfo* PBMsgPlayerInfo::New() const {
  return new PBMsgPlayerInfo;
}

void PBMsgPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pvever()) {
      if (pvever_ != &::google::protobuf::internal::kEmptyString) {
        pvever_->clear();
      }
    }
    if (has_pveinfo()) {
      if (pveinfo_ != &::google::protobuf::internal::kEmptyString) {
        pveinfo_->clear();
      }
    }
    if (has_herover()) {
      if (herover_ != &::google::protobuf::internal::kEmptyString) {
        herover_->clear();
      }
    }
    if (has_heroinfo()) {
      if (heroinfo_ != &::google::protobuf::internal::kEmptyString) {
        heroinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMsgPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pveVer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pvever()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pvever().data(), this->pvever().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pveInfo;
        break;
      }

      // optional bytes pveInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pveInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pveinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heroVer;
        break;
      }

      // optional string heroVer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_herover()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->herover().data(), this->herover().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heroInfo;
        break;
      }

      // optional bytes heroInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_heroinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMsgPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pveVer = 1;
  if (has_pvever()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pvever().data(), this->pvever().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pvever(), output);
  }

  // optional bytes pveInfo = 2;
  if (has_pveinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->pveinfo(), output);
  }

  // optional string heroVer = 3;
  if (has_herover()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->herover().data(), this->herover().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->herover(), output);
  }

  // optional bytes heroInfo = 4;
  if (has_heroinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->heroinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMsgPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pveVer = 1;
  if (has_pvever()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pvever().data(), this->pvever().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pvever(), target);
  }

  // optional bytes pveInfo = 2;
  if (has_pveinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pveinfo(), target);
  }

  // optional string heroVer = 3;
  if (has_herover()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->herover().data(), this->herover().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->herover(), target);
  }

  // optional bytes heroInfo = 4;
  if (has_heroinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->heroinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMsgPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pveVer = 1;
    if (has_pvever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pvever());
    }

    // optional bytes pveInfo = 2;
    if (has_pveinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pveinfo());
    }

    // optional string heroVer = 3;
    if (has_herover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->herover());
    }

    // optional bytes heroInfo = 4;
    if (has_heroinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->heroinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMsgPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMsgPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMsgPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMsgPlayerInfo::MergeFrom(const PBMsgPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvever()) {
      set_pvever(from.pvever());
    }
    if (from.has_pveinfo()) {
      set_pveinfo(from.pveinfo());
    }
    if (from.has_herover()) {
      set_herover(from.herover());
    }
    if (from.has_heroinfo()) {
      set_heroinfo(from.heroinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMsgPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMsgPlayerInfo::CopyFrom(const PBMsgPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMsgPlayerInfo::IsInitialized() const {

  return true;
}

void PBMsgPlayerInfo::Swap(PBMsgPlayerInfo* other) {
  if (other != this) {
    std::swap(pvever_, other->pvever_);
    std::swap(pveinfo_, other->pveinfo_);
    std::swap(herover_, other->herover_);
    std::swap(heroinfo_, other->heroinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMsgPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMsgPlayerInfo_descriptor_;
  metadata.reflection = PBMsgPlayerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
