// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBMsgPveInfo.proto

#ifndef PROTOBUF_PBMsgPveInfo_2eproto__INCLUDED
#define PROTOBUF_PBMsgPveInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PBMsgPveInfo_2eproto();
void protobuf_AssignDesc_PBMsgPveInfo_2eproto();
void protobuf_ShutdownFile_PBMsgPveInfo_2eproto();

class PBMsgPveInfo;
class PBMsgPveInfo_PBMsgPveLevelInfo;
class PBMsgPveInfo_PBMsgPveHidenBossInfo;

// ===================================================================

class PBMsgPveInfo_PBMsgPveLevelInfo : public ::google::protobuf::Message {
 public:
  PBMsgPveInfo_PBMsgPveLevelInfo();
  virtual ~PBMsgPveInfo_PBMsgPveLevelInfo();

  PBMsgPveInfo_PBMsgPveLevelInfo(const PBMsgPveInfo_PBMsgPveLevelInfo& from);

  inline PBMsgPveInfo_PBMsgPveLevelInfo& operator=(const PBMsgPveInfo_PBMsgPveLevelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgPveInfo_PBMsgPveLevelInfo& default_instance();

  void Swap(PBMsgPveInfo_PBMsgPveLevelInfo* other);

  // implements Message ----------------------------------------------

  PBMsgPveInfo_PBMsgPveLevelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgPveInfo_PBMsgPveLevelInfo& from);
  void MergeFrom(const PBMsgPveInfo_PBMsgPveLevelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::int32 levelid() const;
  inline void set_levelid(::google::protobuf::int32 value);

  // optional int32 highestScore = 2;
  inline bool has_highestscore() const;
  inline void clear_highestscore();
  static const int kHighestScoreFieldNumber = 2;
  inline ::google::protobuf::int32 highestscore() const;
  inline void set_highestscore(::google::protobuf::int32 value);

  // optional int32 highestStar = 3;
  inline bool has_higheststar() const;
  inline void clear_higheststar();
  static const int kHighestStarFieldNumber = 3;
  inline ::google::protobuf::int32 higheststar() const;
  inline void set_higheststar(::google::protobuf::int32 value);

  // optional int32 highestSpeed = 4;
  inline bool has_highestspeed() const;
  inline void clear_highestspeed();
  static const int kHighestSpeedFieldNumber = 4;
  inline ::google::protobuf::int32 highestspeed() const;
  inline void set_highestspeed(::google::protobuf::int32 value);

  // optional int32 highestVitality = 5;
  inline bool has_highestvitality() const;
  inline void clear_highestvitality();
  static const int kHighestVitalityFieldNumber = 5;
  inline ::google::protobuf::int32 highestvitality() const;
  inline void set_highestvitality(::google::protobuf::int32 value);

  // optional int32 highestTactics = 6;
  inline bool has_highesttactics() const;
  inline void clear_highesttactics();
  static const int kHighestTacticsFieldNumber = 6;
  inline ::google::protobuf::int32 highesttactics() const;
  inline void set_highesttactics(::google::protobuf::int32 value);

  // optional int32 lastScore = 7;
  inline bool has_lastscore() const;
  inline void clear_lastscore();
  static const int kLastScoreFieldNumber = 7;
  inline ::google::protobuf::int32 lastscore() const;
  inline void set_lastscore(::google::protobuf::int32 value);

  // optional int32 lastStar = 8;
  inline bool has_laststar() const;
  inline void clear_laststar();
  static const int kLastStarFieldNumber = 8;
  inline ::google::protobuf::int32 laststar() const;
  inline void set_laststar(::google::protobuf::int32 value);

  // optional int32 lastSpeed = 9;
  inline bool has_lastspeed() const;
  inline void clear_lastspeed();
  static const int kLastSpeedFieldNumber = 9;
  inline ::google::protobuf::int32 lastspeed() const;
  inline void set_lastspeed(::google::protobuf::int32 value);

  // optional int32 lastVitality = 10;
  inline bool has_lastvitality() const;
  inline void clear_lastvitality();
  static const int kLastVitalityFieldNumber = 10;
  inline ::google::protobuf::int32 lastvitality() const;
  inline void set_lastvitality(::google::protobuf::int32 value);

  // optional int32 lastTactics = 11;
  inline bool has_lasttactics() const;
  inline void clear_lasttactics();
  static const int kLastTacticsFieldNumber = 11;
  inline ::google::protobuf::int32 lasttactics() const;
  inline void set_lasttactics(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PBMsgPveInfo.PBMsgPveLevelInfo)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_highestscore();
  inline void clear_has_highestscore();
  inline void set_has_higheststar();
  inline void clear_has_higheststar();
  inline void set_has_highestspeed();
  inline void clear_has_highestspeed();
  inline void set_has_highestvitality();
  inline void clear_has_highestvitality();
  inline void set_has_highesttactics();
  inline void clear_has_highesttactics();
  inline void set_has_lastscore();
  inline void clear_has_lastscore();
  inline void set_has_laststar();
  inline void clear_has_laststar();
  inline void set_has_lastspeed();
  inline void clear_has_lastspeed();
  inline void set_has_lastvitality();
  inline void clear_has_lastvitality();
  inline void set_has_lasttactics();
  inline void clear_has_lasttactics();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 levelid_;
  ::google::protobuf::int32 highestscore_;
  ::google::protobuf::int32 higheststar_;
  ::google::protobuf::int32 highestspeed_;
  ::google::protobuf::int32 highestvitality_;
  ::google::protobuf::int32 highesttactics_;
  ::google::protobuf::int32 lastscore_;
  ::google::protobuf::int32 laststar_;
  ::google::protobuf::int32 lastspeed_;
  ::google::protobuf::int32 lastvitality_;
  ::google::protobuf::int32 lasttactics_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PBMsgPveInfo_2eproto();
  friend void protobuf_AssignDesc_PBMsgPveInfo_2eproto();
  friend void protobuf_ShutdownFile_PBMsgPveInfo_2eproto();

  void InitAsDefaultInstance();
  static PBMsgPveInfo_PBMsgPveLevelInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgPveInfo_PBMsgPveHidenBossInfo : public ::google::protobuf::Message {
 public:
  PBMsgPveInfo_PBMsgPveHidenBossInfo();
  virtual ~PBMsgPveInfo_PBMsgPveHidenBossInfo();

  PBMsgPveInfo_PBMsgPveHidenBossInfo(const PBMsgPveInfo_PBMsgPveHidenBossInfo& from);

  inline PBMsgPveInfo_PBMsgPveHidenBossInfo& operator=(const PBMsgPveInfo_PBMsgPveHidenBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgPveInfo_PBMsgPveHidenBossInfo& default_instance();

  void Swap(PBMsgPveInfo_PBMsgPveHidenBossInfo* other);

  // implements Message ----------------------------------------------

  PBMsgPveInfo_PBMsgPveHidenBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgPveInfo_PBMsgPveHidenBossInfo& from);
  void MergeFrom(const PBMsgPveInfo_PBMsgPveHidenBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::int32 levelid() const;
  inline void set_levelid(::google::protobuf::int32 value);

  // optional int64 activeTime = 2;
  inline bool has_activetime() const;
  inline void clear_activetime();
  static const int kActiveTimeFieldNumber = 2;
  inline ::google::protobuf::int64 activetime() const;
  inline void set_activetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PBMsgPveInfo.PBMsgPveHidenBossInfo)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_activetime();
  inline void clear_has_activetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 activetime_;
  ::google::protobuf::int32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PBMsgPveInfo_2eproto();
  friend void protobuf_AssignDesc_PBMsgPveInfo_2eproto();
  friend void protobuf_ShutdownFile_PBMsgPveInfo_2eproto();

  void InitAsDefaultInstance();
  static PBMsgPveInfo_PBMsgPveHidenBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBMsgPveInfo : public ::google::protobuf::Message {
 public:
  PBMsgPveInfo();
  virtual ~PBMsgPveInfo();

  PBMsgPveInfo(const PBMsgPveInfo& from);

  inline PBMsgPveInfo& operator=(const PBMsgPveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMsgPveInfo& default_instance();

  void Swap(PBMsgPveInfo* other);

  // implements Message ----------------------------------------------

  PBMsgPveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMsgPveInfo& from);
  void MergeFrom(const PBMsgPveInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PBMsgPveInfo_PBMsgPveLevelInfo PBMsgPveLevelInfo;
  typedef PBMsgPveInfo_PBMsgPveHidenBossInfo PBMsgPveHidenBossInfo;

  // accessors -------------------------------------------------------

  // optional int32 totalScore = 1;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 1;
  inline ::google::protobuf::int32 totalscore() const;
  inline void set_totalscore(::google::protobuf::int32 value);

  // optional int32 totalStars = 2;
  inline bool has_totalstars() const;
  inline void clear_totalstars();
  static const int kTotalStarsFieldNumber = 2;
  inline ::google::protobuf::int32 totalstars() const;
  inline void set_totalstars(::google::protobuf::int32 value);

  // repeated .PBMsgPveInfo.PBMsgPveLevelInfo levelInfo = 3;
  inline int levelinfo_size() const;
  inline void clear_levelinfo();
  static const int kLevelInfoFieldNumber = 3;
  inline const ::PBMsgPveInfo_PBMsgPveLevelInfo& levelinfo(int index) const;
  inline ::PBMsgPveInfo_PBMsgPveLevelInfo* mutable_levelinfo(int index);
  inline ::PBMsgPveInfo_PBMsgPveLevelInfo* add_levelinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveLevelInfo >&
      levelinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveLevelInfo >*
      mutable_levelinfo();

  // optional bytes staminaInfo = 4;
  inline bool has_staminainfo() const;
  inline void clear_staminainfo();
  static const int kStaminaInfoFieldNumber = 4;
  inline const ::std::string& staminainfo() const;
  inline void set_staminainfo(const ::std::string& value);
  inline void set_staminainfo(const char* value);
  inline void set_staminainfo(const void* value, size_t size);
  inline ::std::string* mutable_staminainfo();
  inline ::std::string* release_staminainfo();
  inline void set_allocated_staminainfo(::std::string* staminainfo);

  // optional bytes resultInfo = 5;
  inline bool has_resultinfo() const;
  inline void clear_resultinfo();
  static const int kResultInfoFieldNumber = 5;
  inline const ::std::string& resultinfo() const;
  inline void set_resultinfo(const ::std::string& value);
  inline void set_resultinfo(const char* value);
  inline void set_resultinfo(const void* value, size_t size);
  inline ::std::string* mutable_resultinfo();
  inline ::std::string* release_resultinfo();
  inline void set_allocated_resultinfo(::std::string* resultinfo);

  // optional bytes marchInfo = 6;
  inline bool has_marchinfo() const;
  inline void clear_marchinfo();
  static const int kMarchInfoFieldNumber = 6;
  inline const ::std::string& marchinfo() const;
  inline void set_marchinfo(const ::std::string& value);
  inline void set_marchinfo(const char* value);
  inline void set_marchinfo(const void* value, size_t size);
  inline ::std::string* mutable_marchinfo();
  inline ::std::string* release_marchinfo();
  inline void set_allocated_marchinfo(::std::string* marchinfo);

  // repeated .PBMsgPveInfo.PBMsgPveHidenBossInfo hidenBossInfo = 7;
  inline int hidenbossinfo_size() const;
  inline void clear_hidenbossinfo();
  static const int kHidenBossInfoFieldNumber = 7;
  inline const ::PBMsgPveInfo_PBMsgPveHidenBossInfo& hidenbossinfo(int index) const;
  inline ::PBMsgPveInfo_PBMsgPveHidenBossInfo* mutable_hidenbossinfo(int index);
  inline ::PBMsgPveInfo_PBMsgPveHidenBossInfo* add_hidenbossinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveHidenBossInfo >&
      hidenbossinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveHidenBossInfo >*
      mutable_hidenbossinfo();

  // @@protoc_insertion_point(class_scope:PBMsgPveInfo)
 private:
  inline void set_has_totalscore();
  inline void clear_has_totalscore();
  inline void set_has_totalstars();
  inline void clear_has_totalstars();
  inline void set_has_staminainfo();
  inline void clear_has_staminainfo();
  inline void set_has_resultinfo();
  inline void clear_has_resultinfo();
  inline void set_has_marchinfo();
  inline void clear_has_marchinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 totalscore_;
  ::google::protobuf::int32 totalstars_;
  ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveLevelInfo > levelinfo_;
  ::std::string* staminainfo_;
  ::std::string* resultinfo_;
  ::std::string* marchinfo_;
  ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveHidenBossInfo > hidenbossinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PBMsgPveInfo_2eproto();
  friend void protobuf_AssignDesc_PBMsgPveInfo_2eproto();
  friend void protobuf_ShutdownFile_PBMsgPveInfo_2eproto();

  void InitAsDefaultInstance();
  static PBMsgPveInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PBMsgPveInfo_PBMsgPveLevelInfo

// required int32 levelID = 1;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_levelid() {
  levelid_ = 0;
  clear_has_levelid();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::levelid() const {
  return levelid_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_levelid(::google::protobuf::int32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional int32 highestScore = 2;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_highestscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_highestscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_highestscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_highestscore() {
  highestscore_ = 0;
  clear_has_highestscore();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::highestscore() const {
  return highestscore_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_highestscore(::google::protobuf::int32 value) {
  set_has_highestscore();
  highestscore_ = value;
}

// optional int32 highestStar = 3;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_higheststar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_higheststar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_higheststar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_higheststar() {
  higheststar_ = 0;
  clear_has_higheststar();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::higheststar() const {
  return higheststar_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_higheststar(::google::protobuf::int32 value) {
  set_has_higheststar();
  higheststar_ = value;
}

// optional int32 highestSpeed = 4;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_highestspeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_highestspeed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_highestspeed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_highestspeed() {
  highestspeed_ = 0;
  clear_has_highestspeed();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::highestspeed() const {
  return highestspeed_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_highestspeed(::google::protobuf::int32 value) {
  set_has_highestspeed();
  highestspeed_ = value;
}

// optional int32 highestVitality = 5;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_highestvitality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_highestvitality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_highestvitality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_highestvitality() {
  highestvitality_ = 0;
  clear_has_highestvitality();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::highestvitality() const {
  return highestvitality_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_highestvitality(::google::protobuf::int32 value) {
  set_has_highestvitality();
  highestvitality_ = value;
}

// optional int32 highestTactics = 6;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_highesttactics() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_highesttactics() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_highesttactics() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_highesttactics() {
  highesttactics_ = 0;
  clear_has_highesttactics();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::highesttactics() const {
  return highesttactics_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_highesttactics(::google::protobuf::int32 value) {
  set_has_highesttactics();
  highesttactics_ = value;
}

// optional int32 lastScore = 7;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_lastscore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_lastscore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_lastscore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_lastscore() {
  lastscore_ = 0;
  clear_has_lastscore();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::lastscore() const {
  return lastscore_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_lastscore(::google::protobuf::int32 value) {
  set_has_lastscore();
  lastscore_ = value;
}

// optional int32 lastStar = 8;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_laststar() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_laststar() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_laststar() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_laststar() {
  laststar_ = 0;
  clear_has_laststar();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::laststar() const {
  return laststar_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_laststar(::google::protobuf::int32 value) {
  set_has_laststar();
  laststar_ = value;
}

// optional int32 lastSpeed = 9;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_lastspeed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_lastspeed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_lastspeed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_lastspeed() {
  lastspeed_ = 0;
  clear_has_lastspeed();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::lastspeed() const {
  return lastspeed_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_lastspeed(::google::protobuf::int32 value) {
  set_has_lastspeed();
  lastspeed_ = value;
}

// optional int32 lastVitality = 10;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_lastvitality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_lastvitality() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_lastvitality() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_lastvitality() {
  lastvitality_ = 0;
  clear_has_lastvitality();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::lastvitality() const {
  return lastvitality_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_lastvitality(::google::protobuf::int32 value) {
  set_has_lastvitality();
  lastvitality_ = value;
}

// optional int32 lastTactics = 11;
inline bool PBMsgPveInfo_PBMsgPveLevelInfo::has_lasttactics() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_has_lasttactics() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_has_lasttactics() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::clear_lasttactics() {
  lasttactics_ = 0;
  clear_has_lasttactics();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveLevelInfo::lasttactics() const {
  return lasttactics_;
}
inline void PBMsgPveInfo_PBMsgPveLevelInfo::set_lasttactics(::google::protobuf::int32 value) {
  set_has_lasttactics();
  lasttactics_ = value;
}

// -------------------------------------------------------------------

// PBMsgPveInfo_PBMsgPveHidenBossInfo

// required int32 levelID = 1;
inline bool PBMsgPveInfo_PBMsgPveHidenBossInfo::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveHidenBossInfo::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMsgPveInfo_PBMsgPveHidenBossInfo::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMsgPveInfo_PBMsgPveHidenBossInfo::clear_levelid() {
  levelid_ = 0;
  clear_has_levelid();
}
inline ::google::protobuf::int32 PBMsgPveInfo_PBMsgPveHidenBossInfo::levelid() const {
  return levelid_;
}
inline void PBMsgPveInfo_PBMsgPveHidenBossInfo::set_levelid(::google::protobuf::int32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional int64 activeTime = 2;
inline bool PBMsgPveInfo_PBMsgPveHidenBossInfo::has_activetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMsgPveInfo_PBMsgPveHidenBossInfo::set_has_activetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMsgPveInfo_PBMsgPveHidenBossInfo::clear_has_activetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMsgPveInfo_PBMsgPveHidenBossInfo::clear_activetime() {
  activetime_ = GOOGLE_LONGLONG(0);
  clear_has_activetime();
}
inline ::google::protobuf::int64 PBMsgPveInfo_PBMsgPveHidenBossInfo::activetime() const {
  return activetime_;
}
inline void PBMsgPveInfo_PBMsgPveHidenBossInfo::set_activetime(::google::protobuf::int64 value) {
  set_has_activetime();
  activetime_ = value;
}

// -------------------------------------------------------------------

// PBMsgPveInfo

// optional int32 totalScore = 1;
inline bool PBMsgPveInfo::has_totalscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMsgPveInfo::set_has_totalscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMsgPveInfo::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMsgPveInfo::clear_totalscore() {
  totalscore_ = 0;
  clear_has_totalscore();
}
inline ::google::protobuf::int32 PBMsgPveInfo::totalscore() const {
  return totalscore_;
}
inline void PBMsgPveInfo::set_totalscore(::google::protobuf::int32 value) {
  set_has_totalscore();
  totalscore_ = value;
}

// optional int32 totalStars = 2;
inline bool PBMsgPveInfo::has_totalstars() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBMsgPveInfo::set_has_totalstars() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBMsgPveInfo::clear_has_totalstars() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBMsgPveInfo::clear_totalstars() {
  totalstars_ = 0;
  clear_has_totalstars();
}
inline ::google::protobuf::int32 PBMsgPveInfo::totalstars() const {
  return totalstars_;
}
inline void PBMsgPveInfo::set_totalstars(::google::protobuf::int32 value) {
  set_has_totalstars();
  totalstars_ = value;
}

// repeated .PBMsgPveInfo.PBMsgPveLevelInfo levelInfo = 3;
inline int PBMsgPveInfo::levelinfo_size() const {
  return levelinfo_.size();
}
inline void PBMsgPveInfo::clear_levelinfo() {
  levelinfo_.Clear();
}
inline const ::PBMsgPveInfo_PBMsgPveLevelInfo& PBMsgPveInfo::levelinfo(int index) const {
  return levelinfo_.Get(index);
}
inline ::PBMsgPveInfo_PBMsgPveLevelInfo* PBMsgPveInfo::mutable_levelinfo(int index) {
  return levelinfo_.Mutable(index);
}
inline ::PBMsgPveInfo_PBMsgPveLevelInfo* PBMsgPveInfo::add_levelinfo() {
  return levelinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveLevelInfo >&
PBMsgPveInfo::levelinfo() const {
  return levelinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveLevelInfo >*
PBMsgPveInfo::mutable_levelinfo() {
  return &levelinfo_;
}

// optional bytes staminaInfo = 4;
inline bool PBMsgPveInfo::has_staminainfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBMsgPveInfo::set_has_staminainfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBMsgPveInfo::clear_has_staminainfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBMsgPveInfo::clear_staminainfo() {
  if (staminainfo_ != &::google::protobuf::internal::kEmptyString) {
    staminainfo_->clear();
  }
  clear_has_staminainfo();
}
inline const ::std::string& PBMsgPveInfo::staminainfo() const {
  return *staminainfo_;
}
inline void PBMsgPveInfo::set_staminainfo(const ::std::string& value) {
  set_has_staminainfo();
  if (staminainfo_ == &::google::protobuf::internal::kEmptyString) {
    staminainfo_ = new ::std::string;
  }
  staminainfo_->assign(value);
}
inline void PBMsgPveInfo::set_staminainfo(const char* value) {
  set_has_staminainfo();
  if (staminainfo_ == &::google::protobuf::internal::kEmptyString) {
    staminainfo_ = new ::std::string;
  }
  staminainfo_->assign(value);
}
inline void PBMsgPveInfo::set_staminainfo(const void* value, size_t size) {
  set_has_staminainfo();
  if (staminainfo_ == &::google::protobuf::internal::kEmptyString) {
    staminainfo_ = new ::std::string;
  }
  staminainfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMsgPveInfo::mutable_staminainfo() {
  set_has_staminainfo();
  if (staminainfo_ == &::google::protobuf::internal::kEmptyString) {
    staminainfo_ = new ::std::string;
  }
  return staminainfo_;
}
inline ::std::string* PBMsgPveInfo::release_staminainfo() {
  clear_has_staminainfo();
  if (staminainfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = staminainfo_;
    staminainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBMsgPveInfo::set_allocated_staminainfo(::std::string* staminainfo) {
  if (staminainfo_ != &::google::protobuf::internal::kEmptyString) {
    delete staminainfo_;
  }
  if (staminainfo) {
    set_has_staminainfo();
    staminainfo_ = staminainfo;
  } else {
    clear_has_staminainfo();
    staminainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes resultInfo = 5;
inline bool PBMsgPveInfo::has_resultinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBMsgPveInfo::set_has_resultinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBMsgPveInfo::clear_has_resultinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBMsgPveInfo::clear_resultinfo() {
  if (resultinfo_ != &::google::protobuf::internal::kEmptyString) {
    resultinfo_->clear();
  }
  clear_has_resultinfo();
}
inline const ::std::string& PBMsgPveInfo::resultinfo() const {
  return *resultinfo_;
}
inline void PBMsgPveInfo::set_resultinfo(const ::std::string& value) {
  set_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    resultinfo_ = new ::std::string;
  }
  resultinfo_->assign(value);
}
inline void PBMsgPveInfo::set_resultinfo(const char* value) {
  set_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    resultinfo_ = new ::std::string;
  }
  resultinfo_->assign(value);
}
inline void PBMsgPveInfo::set_resultinfo(const void* value, size_t size) {
  set_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    resultinfo_ = new ::std::string;
  }
  resultinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMsgPveInfo::mutable_resultinfo() {
  set_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    resultinfo_ = new ::std::string;
  }
  return resultinfo_;
}
inline ::std::string* PBMsgPveInfo::release_resultinfo() {
  clear_has_resultinfo();
  if (resultinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resultinfo_;
    resultinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBMsgPveInfo::set_allocated_resultinfo(::std::string* resultinfo) {
  if (resultinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete resultinfo_;
  }
  if (resultinfo) {
    set_has_resultinfo();
    resultinfo_ = resultinfo;
  } else {
    clear_has_resultinfo();
    resultinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes marchInfo = 6;
inline bool PBMsgPveInfo::has_marchinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBMsgPveInfo::set_has_marchinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBMsgPveInfo::clear_has_marchinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBMsgPveInfo::clear_marchinfo() {
  if (marchinfo_ != &::google::protobuf::internal::kEmptyString) {
    marchinfo_->clear();
  }
  clear_has_marchinfo();
}
inline const ::std::string& PBMsgPveInfo::marchinfo() const {
  return *marchinfo_;
}
inline void PBMsgPveInfo::set_marchinfo(const ::std::string& value) {
  set_has_marchinfo();
  if (marchinfo_ == &::google::protobuf::internal::kEmptyString) {
    marchinfo_ = new ::std::string;
  }
  marchinfo_->assign(value);
}
inline void PBMsgPveInfo::set_marchinfo(const char* value) {
  set_has_marchinfo();
  if (marchinfo_ == &::google::protobuf::internal::kEmptyString) {
    marchinfo_ = new ::std::string;
  }
  marchinfo_->assign(value);
}
inline void PBMsgPveInfo::set_marchinfo(const void* value, size_t size) {
  set_has_marchinfo();
  if (marchinfo_ == &::google::protobuf::internal::kEmptyString) {
    marchinfo_ = new ::std::string;
  }
  marchinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBMsgPveInfo::mutable_marchinfo() {
  set_has_marchinfo();
  if (marchinfo_ == &::google::protobuf::internal::kEmptyString) {
    marchinfo_ = new ::std::string;
  }
  return marchinfo_;
}
inline ::std::string* PBMsgPveInfo::release_marchinfo() {
  clear_has_marchinfo();
  if (marchinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = marchinfo_;
    marchinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBMsgPveInfo::set_allocated_marchinfo(::std::string* marchinfo) {
  if (marchinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete marchinfo_;
  }
  if (marchinfo) {
    set_has_marchinfo();
    marchinfo_ = marchinfo;
  } else {
    clear_has_marchinfo();
    marchinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PBMsgPveInfo.PBMsgPveHidenBossInfo hidenBossInfo = 7;
inline int PBMsgPveInfo::hidenbossinfo_size() const {
  return hidenbossinfo_.size();
}
inline void PBMsgPveInfo::clear_hidenbossinfo() {
  hidenbossinfo_.Clear();
}
inline const ::PBMsgPveInfo_PBMsgPveHidenBossInfo& PBMsgPveInfo::hidenbossinfo(int index) const {
  return hidenbossinfo_.Get(index);
}
inline ::PBMsgPveInfo_PBMsgPveHidenBossInfo* PBMsgPveInfo::mutable_hidenbossinfo(int index) {
  return hidenbossinfo_.Mutable(index);
}
inline ::PBMsgPveInfo_PBMsgPveHidenBossInfo* PBMsgPveInfo::add_hidenbossinfo() {
  return hidenbossinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveHidenBossInfo >&
PBMsgPveInfo::hidenbossinfo() const {
  return hidenbossinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBMsgPveInfo_PBMsgPveHidenBossInfo >*
PBMsgPveInfo::mutable_hidenbossinfo() {
  return &hidenbossinfo_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PBMsgPveInfo_2eproto__INCLUDED
